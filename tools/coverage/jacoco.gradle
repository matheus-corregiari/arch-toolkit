//apply from: "$rootDir/tools/coverage/jacoco-common.gradle"

afterEvaluate {

    if (!project.hasProperty('android')) return

    /**
     * Build a list with the task names that will be generated for Jacoco
     */
    def jacocoTasks = []
    def jacocoVerificationTasks = []

    android.productFlavors.all {
        flavor ->
            jacocoTasks.add("jacocoTestReport-${flavor.name}")
            jacocoVerificationTasks.add("jacocoTestCoverageVerification-${flavor.name}")
    }

    if (android.productFlavors.isEmpty()) {
        jacocoTasks.add("jacocoTestReport")
        jacocoVerificationTasks.add("jacocoTestCoverageVerification")
    }

    /**
     * Iterate all jacocoTask Names list and generate all variants to run tests and create the coverage report html
     */
    jacocoTasks.each { jacocoTask ->
        tasks.register(jacocoTask, type: JacocoReport, group: "coverage-report") {
            def flavorName = jacocoTask.split("-").last()
            flavorName = flavorName == jacocoTask ? "" : flavorName

            // Run Tests
            if (project.android.buildTypes.debug.testCoverageEnabled)
                dependsOn "create${flavorName.capitalize()}DebugCoverageReport"
            dependsOn "test${flavorName.capitalize()}DebugUnitTest"

            reports {
                xml.required.set(true)
                html.required.set(true)
            }

            getSourceDirectories().from(files(findSourceDirectories(project, flavorName)))
            getClassDirectories().from(files(findClassDirectories(project, flavorName)))
            getExecutionData().from(fileTree(dir: "$layout.buildDirectory", includes: findCoverageFiles(flavorName)))

            doFirst {
                println files(findClassDirectories(project, flavorName)).files
            }

            doLast {
                println "Coverage report path -> file://${reports.html.outputLocation}/index.html\n"
            }
        }
    }

    /**
     * Iterate all jacocoVerificationTask Names list and generate all variants to verify the coverage rule
     *
     * This tasks must be executed with all coverage files already generated, in other words, after the jacocoTestReport task
     */
    jacocoVerificationTasks.each { jacocoVerificationTask ->
        tasks.register(jacocoVerificationTask, type: JacocoCoverageVerification, group: "coverage-report") {
            def flavorName = jacocoVerificationTask.split("-").last()
            flavorName = flavorName == jacocoVerificationTask ? "" : flavorName

            violationRules {
                failOnViolation = true
                rule {
                    limit {
                        minimum = minCoverage
                    }
                }
            }

            getSourceDirectories().from(files(findSourceDirectories(project, flavorName)))
            getClassDirectories().from(files(findClassDirectories(project, flavorName)))
            getExecutionData().from(fileTree(dir: "$layout.buildDirectory", includes: findCoverageFiles(flavorName)))
        }
    }
}