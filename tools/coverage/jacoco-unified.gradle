//apply from: "$rootDir/tools/coverage/jacoco-common.gradle"

afterEvaluate {

    if (childProjects.isEmpty()) return
    final def flavorNames = []
    final def childProjectsWithoutChildList = listAllChildProjectWithoutChild(project)

    childProjectsWithoutChildList.each { child ->
        child.afterEvaluate {
            if (!child.hasProperty('android')) return

            child.android.productFlavors.all { flavor ->
                if (!flavorNames.contains(flavor.name))
                    flavorNames.add(flavor.name)
            }

            if (flavorNames.isEmpty()) flavorNames.add("")

            flavorNames.each { flavor ->

                final def sourceDirectoriesList = []
                final def classDirectoriesList = []
                final def coverageFilesList = []

                childProjectsWithoutChildList.each { childProject ->
                    sourceDirectoriesList.addAll(findSourceDirectories(childProject, flavor))
                    classDirectoriesList.addAll(findClassDirectories(childProject, flavor))
                    coverageFilesList.addAll(
                            fileTree(dir: "$childProject.buildDir", includes: findCoverageFiles(flavor)).files
                    )
                }

                def jacocoTestReportTaskName = flavor.isEmpty() ? "jacocoTestReport-unified" : "jacocoTestReport-${flavor}-unified"
                if (tasks.findByName(jacocoTestReportTaskName) == null) {

                    /**
                     * Generates a task with creates a unified coverage report for Jacoco, including all sub-project modules.
                     *
                     * This tasks should be executed after all coverage tasks inside each child module
                     */
                    task(jacocoTestReportTaskName, type: JacocoReport, group: "coverage-report") {
                        reports {
                            xml.required.set(true)
                            html.required.set(true)
                        }

                        getSourceDirectories().from(files(sourceDirectoriesList))
                        getClassDirectories().from(files(classDirectoriesList))
                        getExecutionData().from(files(coverageFilesList))

                        doLast {
                            println "Coverage report path -> file://${reports.html.outputLocation.toString()}/index.html\n"
                        }
                    }
                }

                def jacocoTestCoverageVerificationTaskName = flavor.isEmpty() ? "jacocoTestCoverageVerification-unified" : "jacocoTestCoverageVerification-${flavor}-unified"
                if (tasks.findByName(jacocoTestCoverageVerificationTaskName) == null) {

                    /**
                     * Generates a task with verify the coverage rule using including all sub-project modules.
                     *
                     * This tasks should be executed after all coverage tasks inside each child module
                     */
                    task(jacocoTestCoverageVerificationTaskName, type: JacocoCoverageVerification, group: "coverage-report") {
                        violationRules {
                            failOnViolation = true
                            rule {
                                limit {
                                    minimum = minCoverage
                                }
                            }
                        }

                        getSourceDirectories().from(files(sourceDirectoriesList))
                        getClassDirectories().from(files(classDirectoriesList))
                        getExecutionData().from(files(coverageFilesList))
                    }
                }
            }
        }
    }
}